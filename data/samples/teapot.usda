#usda 1.0
(
    defaultPrim = "World"
    upAxis = "Y"
    metersPerUnit = 1
)

def Xform "World" {

    def Scope "Looks" {
        def Material "RedMat" {
            token outputs:surface.connect = </World/Looks/RedMat/Shader.outputs:surface>
            def Shader "Shader" {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.9, 0.2, 0.2)
                float inputs:roughness = 0.4
                token outputs:surface
            }
        }
        def Material "GreyMat" {
            token outputs:surface.connect = </World/Looks/GreyMat/Shader.outputs:surface>
            def Shader "Shader" {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                float inputs:roughness = 0.9
                token outputs:surface
            }
        }
    }

    def Xform "Geom" {
        def Sphere "Ball" ( prepend apiSchemas = ["MaterialBindingAPI"] ) {
            double radius = 1.0
            # fallback color so it renders even if material isnâ€™t picked up
            color3f[] primvars:displayColor = [(0.9, 0.2, 0.2)]
            rel material:binding = </World/Looks/RedMat>
        }

        def Cube "Floor" ( prepend apiSchemas = ["MaterialBindingAPI"] ) {
            double size = 6
            # fallback color for the floor
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/GreyMat>
            matrix4d xformOp:transform = (
                (1,0,0,0),
                (0,1,0,0),
                (0,0,0.1,0),
                (0,0,-1,1)
            )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Scope "Lights" {
        def DomeLight "Sky" {
            float intensity = 100
            color3f color = (1, 1, 1)
        }
    }

    def Camera "Cam" {
        float focalLength = 50
        matrix4d xformOp:transform = (
          (0.7071, 0.0,    0.7071, 0.0),
          (-0.3535, 0.866, 0.3535, 0.0),
          (-0.612, -0.5,   0.612,  0.0),
          (0.0,    3.0,    6.0,    1.0)
        )
        uniform token[] xformOpOrder = ["xformOp:transform"]
        uniform token projection = "perspective"
    }
}
